name: MATLAB generate data

# This workflow do the following:
# 1. Checkout the repository
# 2. Git clone inside the repository: git clone --recurse-submodules git@github.com:optiprofiler/optiprofiler.git
# 3. Go to optiprofiler directory and run 'setup' in matlab command line
# 4. Go to this repository root and run python script 's_get_para.py'
# 5. Run in matlab command line 's_getInfo'
# 6. Upload 'probinfo_matlab.csv', 'probinfo_matlab.mat','probinfo_matlab.txt', 'feasibility_matlab.txt', and 'log_matlab.txt' as artifacts

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    # runs-on: self-hosted
    # timeout-minutes: 1440

    strategy:
        matrix:
            language: [python, matlab]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Checkout OptiProfiler
        uses: actions/checkout@v4
        with:
          repository: optiprofiler/optiprofiler
          path: optiprofiler
          submodules: recursive 
          ref: ${{ matrix.language }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

      - name: Get parametric problems in Python
        if: matrix.language == 'python'
        run: |
          python3 -m s_get_para 'python'
      
      - name: Get parametric problems in MATLAB
        if: matrix.language == 'matlab'
        run: |
          python3 -m s_get_para 'matlab'

      - name: Set up MATLAB
        if: matrix.language == 'matlab'
        uses: matlab-actions/setup-matlab@v2.1.1
        with:
          release: R2024a
          products: Optimization_Toolbox Parallel_Computing_Toolbox
      
      - name: Run setup and run script in MATLAB
        if: matrix.language == 'matlab'
        uses: matlab-actions/run-command@v2.1.1
        with:
          command: |
            cd optiprofiler
            setup
            cd ..
            s_getInfo

      - name: Run Python script
        if: matrix.language == 'python'
        run: |
          python3 s_getInfo.py
          
      - name: Upload Python artifacts
        if: matrix.language == 'python'
        uses: actions/upload-artifact@v4
        with:
          name: probinfo-files-python
          path: |
            probinfo_python.csv
            feasibility_python.txt
            timeout_problems_python.txt
            log_python.txt
      
      - name: Upload MATLAB artifacts
        if: matrix.language == 'matlab'
        uses: actions/upload-artifact@v4
        with:
          name: probinfo-files-matlab
          path: |
            probinfo_matlab.csv
            probinfo_matlab.mat
            probinfo_matlab.txt
            feasibility_matlab.txt
            timeout_problems_matlab.txt
            log_matlab.txt